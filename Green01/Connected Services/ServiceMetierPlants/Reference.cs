//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Green01.ServiceMetierPlants {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceMetierPlants.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        string GetData(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService1/GetDataUsingDataContractResponse")]
        MetierPlant.CompositeType GetDataUsingDataContract(MetierPlant.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService1/GetDataUsingDataContractResponse")]
        System.Threading.Tasks.Task<MetierPlant.CompositeType> GetDataUsingDataContractAsync(MetierPlant.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddProfil", ReplyAction="http://tempuri.org/IService1/AddProfilResponse")]
        bool AddProfil(MetierPlant.Models.Profil p);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddProfil", ReplyAction="http://tempuri.org/IService1/AddProfilResponse")]
        System.Threading.Tasks.Task<bool> AddProfilAsync(MetierPlant.Models.Profil p);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ListProfil", ReplyAction="http://tempuri.org/IService1/ListProfilResponse")]
        MetierPlant.Models.Profil[] ListProfil();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ListProfil", ReplyAction="http://tempuri.org/IService1/ListProfilResponse")]
        System.Threading.Tasks.Task<MetierPlant.Models.Profil[]> ListProfilAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddUtilisateur", ReplyAction="http://tempuri.org/IService1/AddUtilisateurResponse")]
        bool AddUtilisateur(MetierPlant.Models.Utilisateur u);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddUtilisateur", ReplyAction="http://tempuri.org/IService1/AddUtilisateurResponse")]
        System.Threading.Tasks.Task<bool> AddUtilisateurAsync(MetierPlant.Models.Utilisateur u);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateUtilisateur", ReplyAction="http://tempuri.org/IService1/UpdateUtilisateurResponse")]
        bool UpdateUtilisateur(MetierPlant.Models.Utilisateur u);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateUtilisateur", ReplyAction="http://tempuri.org/IService1/UpdateUtilisateurResponse")]
        System.Threading.Tasks.Task<bool> UpdateUtilisateurAsync(MetierPlant.Models.Utilisateur u);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteUtilisateur", ReplyAction="http://tempuri.org/IService1/DeleteUtilisateurResponse")]
        bool DeleteUtilisateur(System.Nullable<int> id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteUtilisateur", ReplyAction="http://tempuri.org/IService1/DeleteUtilisateurResponse")]
        System.Threading.Tasks.Task<bool> DeleteUtilisateurAsync(System.Nullable<int> id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ListUtilisateur", ReplyAction="http://tempuri.org/IService1/ListUtilisateurResponse")]
        MetierPlant.Models.Utilisateur[] ListUtilisateur();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ListUtilisateur", ReplyAction="http://tempuri.org/IService1/ListUtilisateurResponse")]
        System.Threading.Tasks.Task<MetierPlant.Models.Utilisateur[]> ListUtilisateurAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getUtilisateurById", ReplyAction="http://tempuri.org/IService1/getUtilisateurByIdResponse")]
        MetierPlant.Models.Utilisateur getUtilisateurById(System.Nullable<int> id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getUtilisateurById", ReplyAction="http://tempuri.org/IService1/getUtilisateurByIdResponse")]
        System.Threading.Tasks.Task<MetierPlant.Models.Utilisateur> getUtilisateurByIdAsync(System.Nullable<int> id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddFruitier", ReplyAction="http://tempuri.org/IService1/AddFruitierResponse")]
        bool AddFruitier(MetierPlant.Models.Fruitier f);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddFruitier", ReplyAction="http://tempuri.org/IService1/AddFruitierResponse")]
        System.Threading.Tasks.Task<bool> AddFruitierAsync(MetierPlant.Models.Fruitier f);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateFruitier", ReplyAction="http://tempuri.org/IService1/UpdateFruitierResponse")]
        bool UpdateFruitier(MetierPlant.Models.Fruitier f);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateFruitier", ReplyAction="http://tempuri.org/IService1/UpdateFruitierResponse")]
        System.Threading.Tasks.Task<bool> UpdateFruitierAsync(MetierPlant.Models.Fruitier f);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteFruitier", ReplyAction="http://tempuri.org/IService1/DeleteFruitierResponse")]
        bool DeleteFruitier(System.Nullable<int> id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteFruitier", ReplyAction="http://tempuri.org/IService1/DeleteFruitierResponse")]
        System.Threading.Tasks.Task<bool> DeleteFruitierAsync(System.Nullable<int> id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ListFruitier", ReplyAction="http://tempuri.org/IService1/ListFruitierResponse")]
        MetierPlant.Models.Fruitier[] ListFruitier();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ListFruitier", ReplyAction="http://tempuri.org/IService1/ListFruitierResponse")]
        System.Threading.Tasks.Task<MetierPlant.Models.Fruitier[]> ListFruitierAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getFruitierById", ReplyAction="http://tempuri.org/IService1/getFruitierByIdResponse")]
        MetierPlant.Models.Fruitier getFruitierById(System.Nullable<int> id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getFruitierById", ReplyAction="http://tempuri.org/IService1/getFruitierByIdResponse")]
        System.Threading.Tasks.Task<MetierPlant.Models.Fruitier> getFruitierByIdAsync(System.Nullable<int> id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddMarecher", ReplyAction="http://tempuri.org/IService1/AddMarecherResponse")]
        bool AddMarecher(MetierPlant.Models.Marecher m);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddMarecher", ReplyAction="http://tempuri.org/IService1/AddMarecherResponse")]
        System.Threading.Tasks.Task<bool> AddMarecherAsync(MetierPlant.Models.Marecher m);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateMarecher", ReplyAction="http://tempuri.org/IService1/UpdateMarecherResponse")]
        bool UpdateMarecher(MetierPlant.Models.Marecher m);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateMarecher", ReplyAction="http://tempuri.org/IService1/UpdateMarecherResponse")]
        System.Threading.Tasks.Task<bool> UpdateMarecherAsync(MetierPlant.Models.Marecher m);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteMarecher", ReplyAction="http://tempuri.org/IService1/DeleteMarecherResponse")]
        bool DeleteMarecher(System.Nullable<int> id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteMarecher", ReplyAction="http://tempuri.org/IService1/DeleteMarecherResponse")]
        System.Threading.Tasks.Task<bool> DeleteMarecherAsync(System.Nullable<int> id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ListMarecher", ReplyAction="http://tempuri.org/IService1/ListMarecherResponse")]
        MetierPlant.Models.Marecher[] ListMarecher();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ListMarecher", ReplyAction="http://tempuri.org/IService1/ListMarecherResponse")]
        System.Threading.Tasks.Task<MetierPlant.Models.Marecher[]> ListMarecherAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getMarecherById", ReplyAction="http://tempuri.org/IService1/getMarecherByIdResponse")]
        MetierPlant.Models.Marecher getMarecherById(System.Nullable<int> id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getMarecherById", ReplyAction="http://tempuri.org/IService1/getMarecherByIdResponse")]
        System.Threading.Tasks.Task<MetierPlant.Models.Marecher> getMarecherByIdAsync(System.Nullable<int> id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : Green01.ServiceMetierPlants.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<Green01.ServiceMetierPlants.IService1>, Green01.ServiceMetierPlants.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetData(int value) {
            return base.Channel.GetData(value);
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync(int value) {
            return base.Channel.GetDataAsync(value);
        }
        
        public MetierPlant.CompositeType GetDataUsingDataContract(MetierPlant.CompositeType composite) {
            return base.Channel.GetDataUsingDataContract(composite);
        }
        
        public System.Threading.Tasks.Task<MetierPlant.CompositeType> GetDataUsingDataContractAsync(MetierPlant.CompositeType composite) {
            return base.Channel.GetDataUsingDataContractAsync(composite);
        }
        
        public bool AddProfil(MetierPlant.Models.Profil p) {
            return base.Channel.AddProfil(p);
        }
        
        public System.Threading.Tasks.Task<bool> AddProfilAsync(MetierPlant.Models.Profil p) {
            return base.Channel.AddProfilAsync(p);
        }
        
        public MetierPlant.Models.Profil[] ListProfil() {
            return base.Channel.ListProfil();
        }
        
        public System.Threading.Tasks.Task<MetierPlant.Models.Profil[]> ListProfilAsync() {
            return base.Channel.ListProfilAsync();
        }
        
        public bool AddUtilisateur(MetierPlant.Models.Utilisateur u) {
            return base.Channel.AddUtilisateur(u);
        }
        
        public System.Threading.Tasks.Task<bool> AddUtilisateurAsync(MetierPlant.Models.Utilisateur u) {
            return base.Channel.AddUtilisateurAsync(u);
        }
        
        public bool UpdateUtilisateur(MetierPlant.Models.Utilisateur u) {
            return base.Channel.UpdateUtilisateur(u);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateUtilisateurAsync(MetierPlant.Models.Utilisateur u) {
            return base.Channel.UpdateUtilisateurAsync(u);
        }
        
        public bool DeleteUtilisateur(System.Nullable<int> id) {
            return base.Channel.DeleteUtilisateur(id);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteUtilisateurAsync(System.Nullable<int> id) {
            return base.Channel.DeleteUtilisateurAsync(id);
        }
        
        public MetierPlant.Models.Utilisateur[] ListUtilisateur() {
            return base.Channel.ListUtilisateur();
        }
        
        public System.Threading.Tasks.Task<MetierPlant.Models.Utilisateur[]> ListUtilisateurAsync() {
            return base.Channel.ListUtilisateurAsync();
        }
        
        public MetierPlant.Models.Utilisateur getUtilisateurById(System.Nullable<int> id) {
            return base.Channel.getUtilisateurById(id);
        }
        
        public System.Threading.Tasks.Task<MetierPlant.Models.Utilisateur> getUtilisateurByIdAsync(System.Nullable<int> id) {
            return base.Channel.getUtilisateurByIdAsync(id);
        }
        
        public bool AddFruitier(MetierPlant.Models.Fruitier f) {
            return base.Channel.AddFruitier(f);
        }
        
        public System.Threading.Tasks.Task<bool> AddFruitierAsync(MetierPlant.Models.Fruitier f) {
            return base.Channel.AddFruitierAsync(f);
        }
        
        public bool UpdateFruitier(MetierPlant.Models.Fruitier f) {
            return base.Channel.UpdateFruitier(f);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateFruitierAsync(MetierPlant.Models.Fruitier f) {
            return base.Channel.UpdateFruitierAsync(f);
        }
        
        public bool DeleteFruitier(System.Nullable<int> id) {
            return base.Channel.DeleteFruitier(id);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteFruitierAsync(System.Nullable<int> id) {
            return base.Channel.DeleteFruitierAsync(id);
        }
        
        public MetierPlant.Models.Fruitier[] ListFruitier() {
            return base.Channel.ListFruitier();
        }
        
        public System.Threading.Tasks.Task<MetierPlant.Models.Fruitier[]> ListFruitierAsync() {
            return base.Channel.ListFruitierAsync();
        }
        
        public MetierPlant.Models.Fruitier getFruitierById(System.Nullable<int> id) {
            return base.Channel.getFruitierById(id);
        }
        
        public System.Threading.Tasks.Task<MetierPlant.Models.Fruitier> getFruitierByIdAsync(System.Nullable<int> id) {
            return base.Channel.getFruitierByIdAsync(id);
        }
        
        public bool AddMarecher(MetierPlant.Models.Marecher m) {
            return base.Channel.AddMarecher(m);
        }
        
        public System.Threading.Tasks.Task<bool> AddMarecherAsync(MetierPlant.Models.Marecher m) {
            return base.Channel.AddMarecherAsync(m);
        }
        
        public bool UpdateMarecher(MetierPlant.Models.Marecher m) {
            return base.Channel.UpdateMarecher(m);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateMarecherAsync(MetierPlant.Models.Marecher m) {
            return base.Channel.UpdateMarecherAsync(m);
        }
        
        public bool DeleteMarecher(System.Nullable<int> id) {
            return base.Channel.DeleteMarecher(id);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteMarecherAsync(System.Nullable<int> id) {
            return base.Channel.DeleteMarecherAsync(id);
        }
        
        public MetierPlant.Models.Marecher[] ListMarecher() {
            return base.Channel.ListMarecher();
        }
        
        public System.Threading.Tasks.Task<MetierPlant.Models.Marecher[]> ListMarecherAsync() {
            return base.Channel.ListMarecherAsync();
        }
        
        public MetierPlant.Models.Marecher getMarecherById(System.Nullable<int> id) {
            return base.Channel.getMarecherById(id);
        }
        
        public System.Threading.Tasks.Task<MetierPlant.Models.Marecher> getMarecherByIdAsync(System.Nullable<int> id) {
            return base.Channel.getMarecherByIdAsync(id);
        }
    }
}
